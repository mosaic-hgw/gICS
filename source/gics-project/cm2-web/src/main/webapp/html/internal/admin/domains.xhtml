<!--
  ###license-information-start###
  gICS - a Generic Informed Consent Service
  __
  Copyright (C) 2014 - 2018 The MOSAIC Project - Institut fuer Community
  							Medicine of the University Medicine Greifswald -
  							mosaic-projekt@uni-greifswald.de
  
  							concept and implementation
  							l.geidel
  							web client
  							a.blumentritt, m.bialke
  
  							Selected functionalities of gICS were developed as part of the MAGIC Project (funded by the DFG HO 1937/5-1).
  
  							please cite our publications
  							http://dx.doi.org/10.3414/ME14-01-0133
  							http://dx.doi.org/10.1186/s12967-015-0545-6
  							http://dx.doi.org/10.3205/17gmds146
  __
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  ###license-information-end###
  -->

<!-- author: Arne Blumentritt -->

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core" xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:jstl="http://java.sun.com/jsp/jstl/functions" xmlns:p="http://primefaces.org/ui"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:component="http://java.sun.com/jsf/composite/components">

<body>
	<ui:composition template="/resources/templates/gics.xhtml">
		<ui:define name="js">
			<script type="text/javascript">
				function start() {
					PF('statusDialogExport').show();
				}

				function stop() {
					PF('statusDialogExport').hide();
				}
			</script>
		</ui:define>

		<ui:define name="header_title">
			<h:outputFormat value="#{msg['domain.titleHeader']}" />
		</ui:define>

		<ui:define name="title">
			<h:outputText value="#{msg['domain.title']}"
				rendered="#{!domainController.editMode and !domainController.importMode and !domainController.exportMode}" />
			<h:outputText value="#{msg['domain.title.new']}"
				rendered="#{domainController.editMode and empty domainController.editDomain.name}" />
			<h:outputText value="#{msg['domain.title.edit']}"
				rendered="#{domainController.editMode and ! empty domainController.editDomain.name}" />
			<h:outputText value="#{msg['domain.title.import']}" rendered="#{domainController.importMode}" />
			<h:outputText value="#{msg['domain.title.export']}" rendered="#{domainController.exportMode}" />
		</ui:define>

		<ui:define name="help">
			<h:outputText value="#{msg['domain.help']}" escape="false" />
		</ui:define>

		<ui:define name="content">
			<h:form id="main">

				<ui:fragment
					rendered="#{!domainController.editMode and !domainController.importMode and !domainController.exportMode}">

					<p:panel>
						<h4>
							<h:outputText value="#{msg['domain.label.new']}" />
						</h4>
						<p:commandButton actionListener="#{domainController.onNewDomain}" update="@form, :title"
							value="#{msg['common.button.add']}" />
						<p:commandButton id="importButton" actionListener="#{domainController.onImportDomain}"
							update="@form, import, title" oncomplete="PF('importTooltip').hide();"
							value="#{msg['common.button.import']}" />
						<p:tooltip widgetVar="importTooltip" for="importButton" value="#{msg['domain.importHelp']}" />

						<p:commandButton id="exportButton" actionListener="#{domainController.onExportDomain}"
							update="@form, export, title" oncomplete="PF('exportTooltip').hide();"
							value="#{msg['common.button.export']}" disabled="#{domainSelector.selectedDomain == null}" />
						<p:tooltip widgetVar="exportTooltip" for="exportButton" value="#{msg['domain.exportHelp']}"
							rendered="#{domainSelector.selectedDomain != null}" />
					</p:panel>

					<p:panel>
						<h4>
							<h:outputFormat value="#{msg['domain.label.found']}">
								<f:param value="#{domainController.domains.size()}" />
							</h:outputFormat>
						</h4>
						<p:dataTable id="domains" widgetVar="domains" selection="#{domainController.selectedDomain}"
							selectionMode="single" rowKey="#{_domain.name}" paginator="true" paginatorPosition="bottom"
							paginatorTemplate="{CurrentPageReport} {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink}"
							currentPageReportTemplate="{startRecord}-{endRecord} #{cmsg['ui.table.of']} {totalRecords}"
							rows="10" pageLinks="1" value="#{domainController.domains}" var="_domain">
							<p:ajax event="rowSelect" update="@form" />

							<f:facet name="header">
								<p:inputText id="globalFilter" onkeyup="PF('domains').filter()"
									placeholder="#{cmsg['ui.table.search']}" />
							</f:facet>

							<p:column headerText="#{msg['domain.name']}">
			 					#{_domain.label} #{domainSelector.selectedDomain.name eq _domain.name ? msg['domain.label.active'] : ''}
				 			</p:column>
							<p:column headerText="#{msg['domain.comment']}">
				 				#{_domain.comment}
				 			</p:column>
							<p:column headerText="#{msg['domain.versionFormatting']}" styleClass="break-word"
								style="min-width: 100px;">
								Policy: #{ClassPathProvider.convertClassPath(_domain.policyVersionConverter)}<br />
				 				Module: #{ClassPathProvider.convertClassPath(_domain.moduleVersionConverter)}<br />
				 				Template: #{ClassPathProvider.convertClassPath(_domain.ctVersionConverter)}
				 			</p:column>
							<p:column headerText="#{msg['domain.signerTypes']}">
								<ui:repeat var="signerType" value="#{domain.signerIdTypes}" varStatus="status">
									<h:outputText value="#{signerType}" />
									<h:outputText rendered="#{not status.last}" value=", " />
								</ui:repeat>
							</p:column>
							<p:column headerText="#{msg['domain.properties']}" styleClass="break-word"
								style="min-width: 200px;">
								<ui:repeat value="#{jstl:split(_domain.properties,';')}" var="property">
									<h:outputText value="#{property}" />
									<br />
								</ui:repeat>
							</p:column>
							<p:column headerText="#{msg['common.button.actions']}" styleClass="icons">
								<p:commandButton action="#{domainController.onEditDomain(_domain)}" update="@form, :title"
									icon="mdi mdi-pencil" alt="#{msg['common.button.edit']}"
									title="#{msg['common.button.edit']}" />
								<p:commandButton action="#{domainController.onDeleteDomain(_domain)}" update="@form, menu"
									icon="mdi mdi-delete-empty" alt="#{msg['common.button.delete']}"
									title="#{msg['common.button.delete']}">
									<p:confirm header="#{msg['common.confirmation']}"
										message="#{msg['domain.label.confirmDelete']}" icon="mdi mdi-alert-outline" />
								</p:commandButton>
								<p:confirmDialog global="true">
									<p:commandButton value="#{msg['common.button.yes']}" type="button"
										styleClass="ui-confirmdialog-yes" />
									<p:commandButton value="#{msg['common.button.no']}" type="button"
										styleClass="ui-confirmdialog-no" />
								</p:confirmDialog>
							</p:column>
						</p:dataTable>

						<p:contextMenu for="domains" event="contextmenu touchend">
							<p:menuitem value="#{msg['domain.button.activate']}" icon="mdi mdi-cursor-pointer"
								actionListener="#{domainSelector.setSelectedDomain(domainController.selectedDomain)}"
								update="@form, :title" />
							<p:separator />
							<p:menuitem value="#{msg['common.button.edit']}" icon="mdi mdi-pencil"
								actionListener="#{domainController.onEditDomain(domainController.selectedDomain)}"
								update="@form, :title" />
							<p:separator />
							<p:menuitem value="#{msg['common.button.delete']}" icon="mdi mdi-delete-empty"
								actionListener="#{domainController.onDeleteDomain(domainController.selectedDomain)}"
								update="@form">
								<p:confirm header="#{msg['common.confirmation']}"
									message="#{msg['domain.label.confirmDelete']}" icon="mdi mdi-alert-outline" />
							</p:menuitem>
						</p:contextMenu>
					</p:panel>
				</ui:fragment>

				<ui:fragment rendered="#{domainController.editMode}">
					<p:panel>
						<h4>
							<h:outputText value="#{msg['domain.label.description']}" />
						</h4>
						<p:panelGrid columns="2" columnClasses="ui-grid-col-4,ui-grid-col-8" layout="grid">
							<p:outputLabel value="#{msg['domain.name']}" for="domain_name_input" />
							<p:inputText id="domain_name_input" label="#{msg['domain.name']}" required="true"
								value="#{domainController.editDomain.label}" />
							<!-- ************************************************************** -->
							<p:outputLabel for="comment" value="#{msg['domain.comment']}" style="vertical-align: top;" />
							<p:inputTextarea id="comment" value="#{domainController.editDomain.comment}" maxlength="255"
								counter="comment_counter" counterTemplate="#{msg['common.characters.remaining']}"
								style="width: 100%" />
							<p:column />
							<h:outputText id="comment_counter" styleClass="textCounter" />
							<!-- ************************************************************** -->
							<p:outputLabel for="signer_input" value="#{msg['domain.signerTypes']}" />
							<p:inputText id="signer_input" required="true" style="width:100%;"
								value="#{domainController.signerTypes}"
								disabled="#{!empty domainController.editDomain.name}"></p:inputText>
							<!-- TODO	<custom:helpButton id="signer_help" helptext="#{msg['domain.signerHelp']}" show="true"></custom:helpButton> -->
							<p:watermark value="#{msg['domain.signerWatermark']}" for="signer_input" />
						</p:panelGrid>
					</p:panel>

					<!--  MAGIC  -->
					<p:panel id="logoPanel">
						<h4>
							<h:outputText value="#{msg['domain.logo.heading']}" />
						</h4>
						<p:fileUpload id="file_upload_logo" label="#{msg['domain.logo.browse']}"
							cancelLabel="#{msg['domain.logo.cancel']}" uploadLabel="#{msg['domain.logo.upload']}"
							mode="advanced" allowTypes="/(\.|\/)(png)$/" value="#{domainController.logoFile}"
							auto="false" multiple="false" fileLimit="1"
							fileUploadListener="#{domainController.onUploadLogo}" update=":title, menu, logoPanel">
						</p:fileUpload>
						<h:graphicImage value="#{domainController.domainLogo}"
							rendered="#{domainController.hasDomainLogo()}" height="100" />
						<br />
						<p:commandButton value="#{msg['common.button.delete']}"
							rendered="#{domainController.hasDomainLogo()}"
							actionListener="#{domainController.onRemoveLogo}" update=":title logoPanel" immediate="true" />
					</p:panel>

					<p:panel>
						<h4>
							<h:outputText value="#{msg['domain.versionFormatting']}" />
						</h4>

						<p:panelGrid columns="2" columnClasses="ui-grid-col-4,ui-grid-col-8" layout="grid">
							<p:outputLabel value="#{msg['domain.ctVersionConverter']}"></p:outputLabel>
							<p:selectOneMenu style="width:100%" label="#{msg['domain.ctVersionConverter']}"
								widgetVar="ctVersion_select" id="ctversion_select"
								value="#{domainController.editDomain.ctVersionConverter}" required="true"
								disabled="#{!empty domainController.editDomain.name}">
								<f:selectItems value="#{ClassPathProvider.versionMap}" />
							</p:selectOneMenu>
							<p:outputLabel value="#{msg['domain.moduleVersionConverter']}"></p:outputLabel>
							<p:selectOneMenu style="width:100%" label="#{msg['domain.moduleVersionConverter']}"
								widgetVar="moduleVersion_select" id="moduleversion_select"
								value="#{domainController.editDomain.moduleVersionConverter}" required="true"
								disabled="#{!empty domainController.editDomain.name}">
								<f:selectItems value="#{ClassPathProvider.versionMap}" />
							</p:selectOneMenu>
							<p:outputLabel value="#{msg['domain.policyVersionConverter']}"></p:outputLabel>
							<p:selectOneMenu style="width:100%" label="#{msg['domain.policyVersionConverter']}"
								widgetVar="policyVersion_select" id="policyversion_select"
								value="#{domainController.editDomain.policyVersionConverter}" required="true"
								disabled="#{!empty domainController.editDomain.name}">
								<f:selectItems value="#{ClassPathProvider.versionMap}" />
							</p:selectOneMenu>
						</p:panelGrid>
					</p:panel>
					<p:panel>
						<h4>
							<h:outputText value="#{msg['domain.properties']}" />
						</h4>

						<p:panelGrid columns="2" columnClasses="ui-grid-col-4,ui-grid-col-8" layout="grid">
							<c:forEach items="#{domainController.properties}" var="_property">
								<h:column>
									<h:outputText value="#{msg['domain.properties.'.concat(_property.label)]}" />
								</h:column>
								<h:column>
									<p:inputText value="#{_property.value}"
										disabled="#{!empty domainController.editDomain.name}" />
								</h:column>
							</c:forEach>
						</p:panelGrid>
					</p:panel>
					<p:panel>
						<p:commandButton value="#{msg['common.button.add']}"
							rendered="#{empty domainController.editDomain.name}"
							actionListener="#{domainController.onSaveDomain(true)}" update="@form, :title, menu" />
						<p:commandButton value="#{msg['common.button.save']}"
							rendered="#{!empty domainController.editDomain.name}"
							actionListener="#{domainController.onSaveDomain(false)}" update="@form, :title, menu" />
						<p:commandButton value="#{msg['common.button.cancel']}"
							actionListener="#{domainController.onCancel}" update="@form, :title" immediate="true"
							styleClass="grey" />
					</p:panel>
				</ui:fragment>
			</h:form>

			<!--  MAGIC  Import -->
			<h:form id="import" enctype="multipart/form-data">
				<p:panel rendered="#{domainController.importMode}">
					<h4>
						<h:outputText value="#{msg['domain.label.import']}" />
					</h4>
					<p:selectBooleanCheckbox id="ignoreHeader" itemLabel="#{msg['domain.importAllowUpdates']}"
						value="#{domainController.importAllowUpdates}">
						<p:ajax process="@this" ignoreAutoUpdate="true" />
					</p:selectBooleanCheckbox>

					<p:fileUpload id="file_upload" label="Browse" uploadLabel="#{msg['domain.import']}"
						mode="advanced" allowTypes="/(\.|\/)(xml)$/" value="#{domainController.importFile}"
						auto="false" multiple="false" fileLimit="1"
						fileUploadListener="#{domainController.onUploadDomain}" update="@form, main, title, menu">
					</p:fileUpload>
					<p:commandButton value="#{msg['common.button.cancel']}"
						actionListener="#{domainController.onCancel}" update="@form, main, title" immediate="true" />
				</p:panel>
			</h:form>

			<!--  MAGIC  Export -->
			<h:form id="export">
				<ui:fragment rendered="#{domainController.exportMode}">
					<p:panel>
						<h4>
							<h:outputText value="#{msg['domain.label.export']}" />
						</h4>
						<p:selectOneMenu id="exportMode" itemLabel="#{msg['domain.label.exportmode']}"
							value="#{domainController.selectedExportMode}" style="width:200px">
							<p:ajax listener="#{domainController.onExportModeChange}" update="specify" />
							<f:selectItem itemLabel="#{msg['domain.label.exportmode.select']}" itemValue=""
								noSelectionOption="true" />
							<f:selectItems value="#{domainController.exportModes}" />
						</p:selectOneMenu>
						<br />

						<p:selectBooleanCheckbox itemLabel="#{msg['domain.exportLogo']}"
							value="#{domainController.exportLogo}">
							<p:ajax process="@this" ignoreAutoUpdate="true" />
						</p:selectBooleanCheckbox>
					</p:panel>

					<h:panelGroup layout="block" id="specify">
						<p:panel id="exportPoliciesPanel"
							rendered="#{domainController.selectedExportMode == 'POLICIES'}">
							<h4>
								<h:outputText value="#{msg['module.label.policies']}" />
							</h4>
							<p:pickList id="policyPicker" widgetVar="policyPicker"
								value="#{domainController.policyPickItems}" var="_policy" itemLabel="#{_policy.key}"
								itemValue="#{_policy}" converter="policyConverter" showTargetControls="true"
								addLabel="#{msg['module.policy.add']}" addAllLabel="#{msg['module.policy.addAll']}"
								removeLabel="#{msg['module.policy.remove']}"
								removeAllLabel="#{msg['module.policy.removeAll']}" moveUpLabel="#{msg['common.moveUp']}"
								moveDownLabel="#{msg['common.moveDown']}" moveTopLabel="#{msg['common.moveTop']}"
								moveBottomLabel="#{msg['common.moveBottom']}" responsive="true" showSourceFilter="true"
								showTargetFilter="true" filterMatchMode="contains">
								<p:ajax event="transfer" update="@this" partialSubmit="true" ignoreAutoUpdate="true" />
								<f:facet name="sourceCaption">#{msg['module.label.policies.available']} (#{domainController.policyPickItems.source.size()})</f:facet>
								<f:facet name="targetCaption">#{msg['module.label.policies.selected']} (#{domainController.policyPickItems.target.size()})</f:facet>
								<p:column>#{_policy.key.name}</p:column>
								<p:column style="text-align: right;" styleClass="lightgrey">#{msg['policy.version.short']} #{_policy.key.version}</p:column>
							</p:pickList>
						</p:panel>
						<p:panel id="exportModulesPanel"
							rendered="#{domainController.selectedExportMode == 'MODULES'}">
							<h4>
								<h:outputText value="#{msg['template.label.modules']}" />
							</h4>
							<p:pickList id="modulePicker" widgetVar="modulePicker"
								value="#{domainController.modulePickItems}" var="_module" itemLabel="#{_module.key}"
								itemValue="#{_module}" converter="moduleConverter" showTargetControls="true"
								addLabel="#{msg['template.module.add']}" addAllLabel="#{msg['template.module.addAll']}"
								removeLabel="#{msg['template.module.remove']}"
								removeAllLabel="#{msg['template.module.removeAll']}" moveUpLabel="#{msg['common.moveUp']}"
								moveDownLabel="#{msg['common.moveDown']}" moveTopLabel="#{msg['common.moveTop']}"
								moveBottomLabel="#{msg['common.moveBottom']}" responsive="true" showSourceFilter="true"
								showTargetFilter="true" filterMatchMode="contains">
								<p:ajax event="transfer" update="@this" partialSubmit="true" ignoreAutoUpdate="true" />
								<f:facet name="sourceCaption">#{msg['template.label.modules.available']} (#{domainController.modulePickItems.source.size()})</f:facet>
								<f:facet name="targetCaption">#{msg['template.label.modules.selected']} (#{domainController.modulePickItems.target.size()})</f:facet>
								<p:column>#{_module.key.name}</p:column>
								<p:column style="text-align: right;" styleClass="lightgrey">#{msg['module.version.short']} #{_module.key.version}</p:column>
							</p:pickList>
						</p:panel>

						<p:panel id="exportTemplatesPanel"
							rendered="#{domainController.selectedExportMode == 'TEMPLATES'}">
							<h4>
								<h:outputText value="#{msg['domain.label.templates']}" />
							</h4>
							<p:pickList id="templatePicker" widgetVar="templatePicker"
								value="#{domainController.templatePickItems}" var="_template" itemLabel="#{_template.key}"
								itemValue="#{_template}" converter="#{templateConverter}" showTargetControls="true"
								addLabel="#{msg['domain.label.templates.add']}"
								addAllLabel="#{msg['domain.label.templates.addAll']}"
								removeLabel="#{msg['domain.label.templates.remove']}"
								removeAllLabel="#{msg['domain.label.templates.removeAll']}"
								moveUpLabel="#{msg['common.moveUp']}" moveDownLabel="#{msg['common.moveDown']}"
								moveTopLabel="#{msg['common.moveTop']}" moveBottomLabel="#{msg['common.moveBottom']}"
								responsive="true" showSourceFilter="true" showTargetFilter="true" filterMatchMode="contains">
								<p:ajax event="transfer" update="@this" partialSubmit="true" ignoreAutoUpdate="true" />
								<f:facet name="sourceCaption">#{msg['domain.label.templates.available']} (#{domainController.templatePickItems.source.size()})</f:facet>
								<f:facet name="targetCaption">#{msg['domain.label.templates.selected']} (#{domainController.templatePickItems.target.size()})</f:facet>
								<p:column>#{_template.key.name}</p:column>
								<p:column style="text-align: right;" styleClass="lightgrey">#{msg['module.version.short']} #{_template.key.version}</p:column>
							</p:pickList>
						</p:panel>
					</h:panelGroup>

					<p:panel>
						<p:commandButton value="#{msg['domain.export']}" ajax="false"
							onclick="PrimeFaces.monitorDownload(start, stop);">
							<p:fileDownload id="fileExport" value="#{domainController.exportFile}" />
						</p:commandButton>
						<p:commandButton value="#{msg['common.button.cancel']}"
							actionListener="#{domainController.onCancel}" update="@form, main, title" immediate="true"
							styleClass="grey" />
					</p:panel>
					<p:dialog modal="true" widgetVar="statusDialogExport" header="Status" draggable="false"
						closable="false" resizable="false">
					</p:dialog>
				</ui:fragment>
			</h:form>

		</ui:define>
	</ui:composition>
</body>
</html>
