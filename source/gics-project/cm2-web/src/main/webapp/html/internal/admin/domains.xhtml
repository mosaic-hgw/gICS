<!--
  ###license-information-start###
  gICS - a Generic Informed Consent Service
  __
  Copyright (C) 2014 - 2022 Trusted Third Party of the University Medicine Greifswald -
  							kontakt-ths@uni-greifswald.de
  
  							concept and implementation
  							l.geidel, c.hampf
  							web client
  							a.blumentritt, m.bialke, f.m.moser
  							fhir-api
  							m.bialke
  							docker
  							r. schuldt
  
  							The gICS was developed by the University Medicine Greifswald and published
   							in 2014 as part of the research project "MOSAIC" (funded by the DFG HO 1937/2-1).
   
  							Selected functionalities of gICS were developed as
  							part of the following research projects:
  							- MAGIC (funded by the DFG HO 1937/5-1)
  							- MIRACUM (funded by the German Federal Ministry of Education and Research 01ZZ1801M)
  							- NUM-CODEX (funded by the German Federal Ministry of Education and Research 01KX2021)
  
  							please cite our publications
  							https://doi.org/10.1186/s12967-020-02457-y
  							http://dx.doi.org/10.3414/ME14-01-0133
  							http://dx.doi.org/10.1186/s12967-015-0545-6
  							http://dx.doi.org/10.3205/17gmds146
  __
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  ###license-information-end###
  -->

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:components="http://java.sun.com/jsf/composite/components" xmlns:f="http://java.sun.com/jsf/core"
	  xmlns:h="http://java.sun.com/jsf/html" xmlns:p="http://primefaces.org/ui" xmlns:ui="http://java.sun.com/jsf/facelets">

<body>
<ui:composition template="/resources/templates/gics.xhtml">
	<ui:define name="header_title">
		<h:outputFormat value="#{msg['page.domains.title']}" />
	</ui:define>

	<ui:define name="title">
		<h:outputText value="#{msg['page.domains.title']}" />
	</ui:define>

	<ui:define name="help">
		<h:outputText escape="false" value="#{msg['page.domains.help']}" />
	</ui:define>

	<ui:define name="content">
		<h:form id="main" onkeypress="if (event.keyCode === 13) { return false; }">
			<p:panel>
				<h4>
					<h:outputText value="#{msg['page.domains.new']}" />
				</h4>
				<p:commandButton actionListener="#{domainController.onNew}" icon="mdi mdi-plus" oncomplete="PF('new_dialog').show();" update="new_dialog"
								 value="#{cmsg['ui.button.create']}" />
			</p:panel>
			<p:panel style="margin-top: 15px;">
				<h4>
					<h:outputFormat id="domainsCounter" value="#{msg['page.domains.domains']}">
						<f:param value="#{domainController.domains.size()}" />
					</h:outputFormat>
				</h4>
				<p:dataTable id="domains" currentPageReportTemplate="{startRecord}-{endRecord} #{cmsg['ui.table.of']} {totalRecords}"
							 emptyMessage="#{cmsg['ui.table.empty']}" globalFilter="#{domainController.globalFilter}"
							 pageLinks="3" paginator="true" paginatorPosition="bottom"
							 paginatorTemplate="{CurrentPageReport} {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink}"
							 rowKey="#{domainController.convertKey(_domain.name)}" rows="10" selection="#{domainController.selectedDomain}" selectionMode="single"
							 value="#{domainController.domains}" var="_domain" widgetVar="domains">
					<p:ajax event="contextMenu" ignoreAutoUpdate="true" update="main:domains_menu" />
					<p:ajax event="filter" ignoreAutoUpdate="true" />

					<f:facet name="header">
						<p:inputText id="globalFilter" onkeyup="PF('domains').filter()" placeholder="#{cmsg['ui.table.filter']}" value="#{domainController.globalFilter}" />
					</f:facet>

					<p:column filterBy="#{_domain.label}" filterMatchMode="contains" filterStyle="display: none"
							  headerText="#{msg['model.domain.label']}" sortBy="#{_domain.label}" sortOrder="asc" width="25%">
						#{_domain.label} #{domainSelector.selectedDomain.name eq _domain.name ? msg['page.domains.active'] : ''}
					</p:column>

					<p:column filterBy="#{_domain.comment}" filterMatchMode="contains" filterStyle="display: none"
							  headerText="#{msg['model.domain.comment']}" width="50%">
						<h:outputText value="#{_domain.comment}" />
					</p:column>

					<p:column headerText="#{msg['consent.title.type_CONSENT']}" styleClass="width: 1px;">
						<h:outputText value="#{domainController.countConsents(_domain.name, 'CONSENT')}" />
					</p:column>

					<p:column headerText="#{msg['consent.title.type_REVOCATION']}" styleClass="width: 1px;">
						<h:outputText value="#{domainController.countConsents(_domain.name, 'REVOCATION')}" />
					</p:column>

					<p:column headerText="#{msg['consent.title.type_REFUSAL']}" styleClass="width: 1px;">
						<h:outputText value="#{domainController.countConsents(_domain.name, 'REFUSAL')}" />
					</p:column>

					<p:column headerText="#{msg['template.templates']}" styleClass="width: 1px;">
						<h:outputText value="#{domainController.countTemplates(_domain.name)}" />
					</p:column>

					<p:column headerText="#{msg['module.modules']}" styleClass="width: 1px;">
						<h:outputText value="#{domainController.countModules(_domain.name)}" />
					</p:column>

					<p:column headerText="#{msg['policy.policies']}" styleClass="width: 1px;">
						<h:outputText value="#{domainController.countPolicies(_domain.name)}" />
					</p:column>

					<p:column styleClass="small-icons">
						<p:commandButton actionListener="#{domainController.onShowDetails(_domain)}" alt="#{msg['page.domains.dialog.READ']}"
										 icon="mdi mdi-information-outline" oncomplete="PF('new_dialog').show();" title="#{msg['page.domains.dialog.READ']}" update="new_dialog" />
					</p:column>
				</p:dataTable>
				<components:rightclick />

				<p:contextMenu id="domains_menu" for="domains">
					<p:menuitem actionListener="#{domainController.onShowDetails(domainController.selectedDomain)}" icon="mdi mdi-information-outline"
								oncomplete="PF('new_dialog').show();" update="new_dialog" value="#{msg['page.domains.dialog.READ']}" />
					<p:separator />

					<p:menuitem actionListener="#{domainSelector.setSelectedDomain(domainController.selectedDomain)}" icon="mdi mdi-cursor-pointer"
								value="#{msg['page.domains.activate']}" />
					<p:separator />

					<p:menuitem actionListener="#{domainController.onEdit(domainController.selectedDomain)}" icon="mdi mdi-pencil-outline"
								oncomplete="PF('new_dialog').show()" update="@this, new_dialog"
								value="#{cmsg['ui.button.edit']} #{domainController.selectedDomain.finalised ? msg['page.domains.limited'] : ''}">
					</p:menuitem>
					<p:separator />

					<p:menuitem disabled="#{domainController.selectedDomain ne null and not (domainController.isDeletable(domainController.selectedDomain))}"
								icon="mdi mdi-delete-empty" ignoreAutoUpdate="true" oncomplete="PF('confirmDelete_dialog').show();" update="confirmDelete_dialog:message"
								value="#{cmsg['ui.button.delete']}">
					</p:menuitem>
				</p:contextMenu>
			</p:panel>
		</h:form>

		<components:confirm_dialog id="confirmDelete_dialog" action="#{domainController.onDelete}"
								   message="#{domainController.formatMessage('page.domains.delete.confirmation', [domainController.selectedDomain.name])}"
								   onyes="PF('domains').filter()" update="main:domains, main:domainsCounter, @widgetVar(projectMenu), :domainSelector" />

		<p:dialog id="new_dialog" blockScroll="true" header="#{msg['page.domains.dialog.'.concat(domainController.pageMode.name())]}" modal="true"
				  responsive="true" widgetVar="new_dialog" closeOnEscape="true">
			<p:ajax event="close" ignoreAutoUpdate="true" listener="#{domainController.onCancel}" update="new_dialog" />
			<h:form onkeypress="if (event.keyCode === 13) { return false; }">
				<p:focus context="@form" />
				<p:messages escape="false" />
				<div class="ui-g">

					<div class="ui-g-12 ui-lg-6">

						<!-- General info -->
						<p:panelGrid columnClasses="ui-grid-col-6,ui-grid-col-6" columns="2" layout="grid"
									 styleClass="#{domainController.pageMode == 'READ' ? 'mimic-datatable' : ''}">

							<!-- Title -->
							<p:outputLabel for="name" value="#{msg['model.domain.label']}" />
							<p:inputText id="name" rendered="#{domainController.pageMode != 'READ'}" required="true" value="#{domainController.selectedDomain.label}" />
							<h:outputText rendered="#{domainController.pageMode == 'READ'}" value="#{domainController.selectedDomain.label}" />

							<!-- Comment -->
							<p:outputLabel for="comment" value="#{msg['model.domain.comment']}" />
							<p:inputTextarea id="comment" counter="comment_counter" counterTemplate="#{cmsg['ui.text.charsRemaining']}" maxlength="255"
											 rendered="#{domainController.pageMode != 'READ'}" rows="3" value="#{domainController.selectedDomain.comment}" />
							<p:column rendered="#{domainController.pageMode != 'READ'}" />
							<h:outputText id="comment_counter" rendered="#{domainController.pageMode != 'READ'}" styleClass="textCounter" />
							<h:outputText rendered="#{domainController.pageMode == 'READ'}" value="#{domainController.selectedDomain.comment}" />

							<!-- Signer Ids -->
							<p:outputLabel for="signerIdTypes" value="#{msg['page.domains.signerIds']} #{domainController.pageMode != 'READ' ? '*' : ''}" />
							<h:panelGroup id="signerIdTypes" layout="block" >
								<!-- EDIT and NEW -->
								<p:dataTable id="signerIdTypesTable" styleClass="no-header" rowIndexVar="_rowIndex" draggableRows="#{!domainController.selectedDomain.finalised}"
											 rendered="#{domainController.pageMode != 'READ' and not empty domainController.selectedDomain.signerIdTypes}"
											 style="width: 230px;"
											 value="#{domainController.selectedDomain.signerIdTypes}" var="_signerIdType" varStatus="_var" widgetVar="_table">
									<p:column>
										<h:outputText value="#{_signerIdType}"/>
									</p:column>
									<p:column styleClass="icons" rendered="#{!domainController.selectedDomain.finalised}">
										<p:commandButton actionListener="#{domainController.removeSignerIdType(_rowIndex)}" icon="mdi mdi-minus" process="@form:signerIdTypes"
														 styleClass="secondary" update="@form:signerIdTypes" />
									</p:column>
								</p:dataTable>
								<!-- READ -->
								<ui:repeat value="#{domainController.selectedDomain.signerIdTypes}" var="_signerIdType" varStatus="_var"
										   rendered="#{domainController.pageMode == 'READ'}" >
									<div class="list-item">
										<h:outputText value="#{_signerIdType}" />
									</div>
								</ui:repeat>

								<h:panelGroup id="newSignerIdType" layout="block"
											  rendered="#{domainController.pageMode != 'READ' and !domainController.selectedDomain.finalised}">
									<p:inputText style="width: 172px;" value="#{domainController.newSignerIdType}" />
									<p:commandButton id="addSignerId" actionListener="#{domainController.onNewSignerIdType}" icon="mdi mdi-plus"
													 process="@form:newSignerIdType" styleClass="secondary" style="margin-left: 5px;"
													 update="@form:signerIdTypes" title="#{msg['page.domains.signerIds.add']}" />
								</h:panelGroup>
							</h:panelGroup>
						</p:panelGrid>
					</div>

					<!-- Logo -->
					<h:panelGroup id="logo" class="ui-g-12 ui-lg-6" layout="block">
						<h4>
							<h:outputText value="#{msg['page.domains.logo']}" />
						</h4>
						<p:fileUpload allowTypes="/(\.|\/)(png|jpg|jpeg|PNG|JPG|JPEG)$/" auto="true" cancelLabel="#{cmsg['ui.file.cancel']}"
									  listener="#{domainController.onUploadLogo}" invalidFileMessage="#{cmsg['ui.file.format.notPNG']}" label="#{cmsg['ui.file.choose']}"
									  multiple="false" process="@this" rendered="#{domainController.pageMode != 'READ' and empty domainController.selectedDomain.logo}"
									  update="logo" uploadLabel="#{cmsg['ui.file.upload']}">
						</p:fileUpload>

						<p:graphicImage cache="false" rendered="#{not empty domainController.selectedDomain.logo}" stream="false"
										value="#{domainController.getImageStreamFromBase64(domainController.selectedDomain.logo, 'png', 'logo')}"
										style="max-width: 600px; max-height: 100px;;" />
						<br />
						<p:commandButton actionListener="#{domainController.onDeleteLogo()}" icon="mdi mdi-delete-empty" immediate="true"
										 rendered="#{domainController.pageMode != 'READ' and not empty domainController.selectedDomain.logo}" update="logo"
										 value="#{msg['page.domains.logo.delete']}">
						</p:commandButton>
					</h:panelGroup>

					<!-- Other Settings -->
					<div class="ui-g-12 ui-lg-6">
						<h4>
							<h:outputText value="#{msg['page.domains.options']}" />
						</h4>
						<p:panelGrid columnClasses="ui-grid-col-6,ui-grid-col-6" columns="2" layout="grid"
									 styleClass="#{domainController.pageMode == 'READ' ? 'mimic-datatable' : ''}">

							<!-- Scan is mandatory -->
							<p:outputLabel value="#{msg['page.domains.scans.mandatory']}" />
							<p:selectBooleanCheckbox disabled="#{domainController.selectedDomain.finalised}" rendered="#{domainController.pageMode != 'READ'}"
													 value="#{domainController.scanMandatory}" />
							<h:outputText rendered="#{domainController.pageMode == 'READ'}" value="#{cmsg['ui.boolean.'.concat(domainController.scanMandatory)]}" />

							<!-- Scan size limit -->
							<p:outputLabel value="#{msg['page.domains.scans.sizeLimit']}" />
							<p:spinner disabled="#{domainController.selectedDomain.finalised}" min="1" rendered="#{domainController.pageMode != 'READ'}" suffix=" MB"
									   value="#{domainController.scanSizeLimit}" />
							<h:outputText rendered="#{domainController.pageMode == 'READ'}" value="#{domainController.scanSizeLimit} MB" />

							<!-- Revoke is permanent -->
							<h:panelGroup layout="block">
								<p:outputLabel value="#{msg['page.domains.misc.revokeIsPermanent']}" />
								<components:tooltip value="#{msg['page.domains.misc.revokeIsPermanent.hint']}" />
							</h:panelGroup>
							<p:selectBooleanCheckbox disabled="#{domainController.selectedDomain.finalised}" rendered="#{domainController.pageMode != 'READ'}"
													 value="#{domainController.revokeIsPermanent}" />
							<h:outputText rendered="#{domainController.pageMode == 'READ'}" value="#{cmsg['ui.boolean.'.concat(domainController.revokeIsPermanent)]}" />

							<!-- Use latest version -->
							<h:panelGroup layout="block">
								<p:outputLabel value="#{msg['page.domains.misc.useLatestVersion']}" />
								<components:tooltip value="#{msg['page.domains.misc.useLatestVersion.hint']}" />
							</h:panelGroup>
							<p:selectBooleanCheckbox disabled="#{domainController.selectedDomain.finalised}" rendered="#{domainController.pageMode != 'READ'}"
													 value="#{domainController.useLatestVersion}" />
							<h:outputText rendered="#{domainController.pageMode == 'READ'}" value="#{cmsg['ui.boolean.'.concat(domainController.useLatestVersion)]}" />

							<!-- Use notification service -->
							<h:panelGroup layout="block">
								<p:outputLabel value="#{msg['page.domains.misc.sendNotificationsWeb']}" />
								<components:tooltip value="#{msg['page.domains.misc.sendNotificationsWeb.hint']}" />
							</h:panelGroup>
							<p:selectBooleanCheckbox disabled="#{domainController.selectedDomain.finalised}" rendered="#{domainController.pageMode != 'READ'}"
													 value="#{domainController.sendNotificationsWeb}" />
							<h:outputText rendered="#{domainController.pageMode == 'READ'}" value="#{cmsg['ui.boolean.'.concat(domainController.sendNotificationsWeb)]}" />

							<!-- External properties -->
							<p:outputLabel for="extern_properties" value="#{msg['model.domain.externProperties']}" />
							<p:inputTextarea id="extern_properties" counter="extern_properties_counter" counterTemplate="#{cmsg['ui.text.charsRemaining']}"
											 maxlength="4095" rendered="#{domainController.pageMode != 'READ'}" rows="3" value="#{domainController.selectedDomain.externProperties}" />
							<p:column rendered="#{domainController.pageMode != 'READ'}" />
							<h:outputText id="extern_properties_counter" rendered="#{domainController.pageMode != 'READ'}" styleClass="textCounter" />
							<h:outputText rendered="#{domainController.pageMode == 'READ'}" value="#{domainController.selectedDomain.externProperties}" />
							
							<!-- Expiration Properties -->
							<h:outputText value="#{msg['model.domain.expirationProperties']}" />
							<components:expiration checkboxLabel="false" dialog="true" disabled="#{domainController.selectedDomain.finalised}" expiration="#{domainController.expiration.editExpiration}" ontoggle="PF('new_dialog').resetPosition();" />
						</p:panelGrid>
					</div>

					<div class="ui-g-12 ui-lg-6">
						<!-- Versioning -->
						<h4>
							<h:outputText value="#{msg['page.domains.versionLevel']}" />
							<components:tooltip value="#{msg['page.domains.versionLevel.hint']}" />
						</h4>
						<h:panelGroup id="versionLevelSimple" layout="block"
									  rendered="#{domainController.pageMode != 'READ' and !domainController.selectedDomain.finalised}">
							<p:panelGrid columnClasses="ui-grid-col-6,ui-grid-col-6" columns="2" layout="grid" rendered="#{!domainController.versionLevelDetailed}">

								<!-- General versionLevel -->
								<p:outputLabel value="#{msg['page.domains.versionLevel.general']}" />
								<p:selectOneMenu value="#{domainController.selectedDomain.ctVersionConverter}" disabled="#{domainController.selectedDomain.finalised}">
									<f:selectItems value="#{Versions.versionMap.keySet()}" var="_version"
												   itemLabel="#{msg['domain.versionLevel.'.concat(Versions.label(_version))]}" />
								</p:selectOneMenu>

								<p:commandButton id="enableVersionLevelDetailed" actionListener="#{domainController.setVersionLevelDetailed(true)}" icon="mdi mdi-menu-down"
												 process="@this" styleClass="secondary" update="@form:versionLevelSimple, @form:versionLevelDetailed"
												 value="#{msg['page.domains.versionLevel.detailed']}" />
							</p:panelGrid>
						</h:panelGroup>

						<h:panelGroup id="versionLevelDetailed" layout="block">
							<p:panelGrid columnClasses="ui-grid-col-6,ui-grid-col-6" columns="2" layout="grid"
										 rendered="#{domainController.versionLevelDetailed or domainController.pageMode == 'READ' or domainController.selectedDomain.finalised}"
										 styleClass="#{domainController.pageMode == 'READ' ? 'mimic-datatable' : ''}">

								<!-- Template versionLevel -->
								<p:outputLabel value="#{msg['template.templates']}" />
								<p:selectOneMenu rendered="#{domainController.pageMode != 'READ'}" disabled="#{domainController.selectedDomain.finalised}"
												 value="#{domainController.selectedDomain.ctVersionConverter}">
									<f:selectItems value="#{Versions.versionMap.keySet()}" var="_version"
												   itemLabel="#{msg['domain.versionLevel.'.concat(Versions.label(_version))]}" />
								</p:selectOneMenu>
								<h:outputText rendered="#{domainController.pageMode == 'READ'}"
											  value="#{msg['domain.versionLevel.'.concat(Versions.label(domainController.selectedDomain.ctVersionConverter))]}" />

								<!-- Module versionLevel -->
								<p:outputLabel value="#{msg['module.modules']}" />
								<p:selectOneMenu rendered="#{domainController.pageMode != 'READ'}" disabled="#{domainController.selectedDomain.finalised}"
												 value="#{domainController.selectedDomain.moduleVersionConverter}">
									<f:selectItems value="#{Versions.versionMap.keySet()}" var="_version"
												   itemLabel="#{msg['domain.versionLevel.'.concat(Versions.label(_version))]}" />
								</p:selectOneMenu>
								<h:outputText rendered="#{domainController.pageMode == 'READ'}"
											  value="#{msg['domain.versionLevel.'.concat(Versions.label(domainController.selectedDomain.moduleVersionConverter))]}" />

								<!-- Policy versionLevel -->
								<p:outputLabel value="#{msg['policy.policies']}" />
								<p:selectOneMenu rendered="#{domainController.pageMode != 'READ'}" disabled="#{domainController.selectedDomain.finalised}"
												 value="#{domainController.selectedDomain.policyVersionConverter}">
									<f:selectItems value="#{Versions.versionMap.keySet()}" var="_version"
												   itemLabel="#{msg['domain.versionLevel.'.concat(Versions.label(_version))]}" />
								</p:selectOneMenu>
								<h:outputText rendered="#{domainController.pageMode == 'READ'}"
											  value="#{msg['domain.versionLevel.'.concat(Versions.label(domainController.selectedDomain.policyVersionConverter))]}" />

								<p:commandButton id="enableVersionLevelSimple" actionListener="#{domainController.setVersionLevelDetailed(false)}" icon="mdi mdi-menu-up"
												 process="@this" rendered="#{domainController.pageMode != 'READ' and !domainController.selectedDomain.finalised}" styleClass="secondary"
												 update="@form:versionLevelSimple, @form:versionLevelDetailed" value="#{msg['page.domains.versionLevel.simple']}" />
							</p:panelGrid>
						</h:panelGroup>

						<!-- Quality control -->
						<h4>
							<h:outputText value="#{msg['page.domains.qualityControl']}" />
						</h4>
						<p:panelGrid columnClasses="ui-grid-col-6,ui-grid-col-6" columns="2" layout="grid"
									 styleClass="#{domainController.pageMode == 'READ' ? 'mimic-datatable' : ''}">

							<!-- Qualicty control is optional -->
							<p:outputLabel value="#{msg['page.domains.qualityControl.optional']}" />
							<p:selectBooleanCheckbox rendered="#{domainController.pageMode != 'READ'}" disabled="#{domainController.selectedDomain.finalised}"
													 value="#{domainController.qualityControlOptional}" />
							<h:outputText rendered="#{domainController.pageMode == 'READ'}" value="#{cmsg['ui.boolean.'.concat(domainController.qualityControlOptional)]}" />
						</p:panelGrid>

						<!-- Statistic -->
						<h4>
							<h:outputText value="#{msg['page.domains.statistic']}" />
						</h4>
						<p:panelGrid columnClasses="ui-grid-col-6,ui-grid-col-6" columns="2" layout="grid"
									 styleClass="#{domainController.pageMode == 'READ' ? 'mimic-datatable' : ''}">

							<!-- Calculate document details -->
							<h:panelGroup layout="block">
								<p:outputLabel value="#{msg['page.domains.statistic.document_details']}" />
								<components:tooltip value="#{msg['page.domains.statistic.document_details.hint']}" />
							</h:panelGroup>
							<p:selectBooleanCheckbox disabled="#{domainController.selectedDomain.finalised}" rendered="#{domainController.pageMode != 'READ'}"
													 value="#{domainController.statisticDocumentDetails}" />
							<h:outputText rendered="#{domainController.pageMode == 'READ'}" value="#{cmsg['ui.boolean.'.concat(domainController.statisticDocumentDetails)]}" />

							<!-- Calculate policy details -->
							<h:panelGroup layout="block">
								<p:outputLabel value="#{msg['page.domains.statistic.policy_details']}" />
								<components:tooltip value="#{msg['page.domains.statistic.policy_details.hint']}" />
							</h:panelGroup>
							<p:selectBooleanCheckbox disabled="#{domainController.selectedDomain.finalised}" rendered="#{domainController.pageMode != 'READ'}"
													 value="#{domainController.statisticPolicyDetails}" />
							<h:outputText rendered="#{domainController.pageMode == 'READ'}" value="#{cmsg['ui.boolean.'.concat(domainController.statisticPolicyDetails)]}" />
						</p:panelGrid>
					</div>
				</div>

				<ui:fragment rendered="#{domainController.pageMode != 'READ'}">
					<p:commandButton id="save" actionListener="#{domainController.onSave}" ajax="true" icon="mdi mdi-check"
									 oncomplete="if (args &amp;&amp; !args.validationFailed) PF('new_dialog').hide(); PF('domains').filter();"
									 update="@form, main:domains, main:domainsCounter, @widgetVar(projectMenu), :domainSelector"
									 value="#{domainController.pageMode.name() == 'NEW' ? cmsg['ui.button.create'] : cmsg['ui.button.save']}" />
					<p:commandButton id="cancel" icon="mdi mdi-close" immediate="true" onclick="PF('new_dialog').hide();" styleClass="secondary"
									 value="#{cmsg['ui.button.cancel']}" />
				</ui:fragment>
				<ui:fragment rendered="#{domainController.pageMode == 'READ'}">
					<p:commandButton id="close" icon="mdi mdi-close" immediate="true" onclick="PF('new_dialog').hide();" styleClass="secondary"
									 value="#{cmsg['ui.button.close']}" />
				</ui:fragment>
			</h:form>
		</p:dialog>

	</ui:define>
</ui:composition>
</body>
</html>
